{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useAddCartItemMutation, useChangeCartItemMutation, useLazyGetCartQuery } from '../redux/injected/injectedCart';\nimport { useErrorHandler } from './useErrorHandler';\nexport const useAddProduct = () => {\n  _s();\n  const [getCartItems, getStatuses] = useLazyGetCartQuery();\n  const getErrorHandlerData = {\n    error: getStatuses.error,\n    isError: getStatuses.isError,\n    isClient: false\n  };\n  useErrorHandler({\n    ...getErrorHandlerData\n  });\n  const [addCartItem, addStatues] = useAddCartItemMutation();\n  const addErrorHandlerData = {\n    error: addStatues.error,\n    isError: addStatues.isError,\n    isClient: true,\n    errorMessage: 'Произошла ошибка при попытке добавления товара в корзину'\n  };\n  useErrorHandler({\n    ...addErrorHandlerData\n  });\n  const [changeCartItem, changeStatuses] = useChangeCartItemMutation();\n  const changeErrorHandlerData = {\n    error: changeStatuses.error,\n    isError: changeStatuses.isError,\n    isClient: true,\n    errorMessage: 'Произошла ошибка при попытке увеличения колличества товара'\n  };\n  useErrorHandler({\n    ...changeErrorHandlerData\n  });\n  const addProduct = async item => {\n    const response = await getCartItems();\n\n    // if (response.data) {\n    //     if (response.data.some((obj) => obj.title === item.title)) {\n    //         const existingCount = response.data.find((obj) => obj.title === item.title)\n    //         item.count += existingCount!.count\n    //         // item.id = existingCount!.id\n    //         await changeCartItem(item)\n    //     } else {\n    //         await addCartItem(item)\n    //     }\n    // }\n  };\n\n  return addProduct;\n};\n_s(useAddProduct, \"fyMACMgT+W9T8IjAx7rDwz4pwK0=\", false, function () {\n  return [useLazyGetCartQuery, useErrorHandler, useAddCartItemMutation, useErrorHandler, useChangeCartItemMutation, useErrorHandler];\n});","map":{"version":3,"names":["useAddCartItemMutation","useChangeCartItemMutation","useLazyGetCartQuery","useErrorHandler","useAddProduct","getCartItems","getStatuses","getErrorHandlerData","error","isError","isClient","addCartItem","addStatues","addErrorHandlerData","errorMessage","changeCartItem","changeStatuses","changeErrorHandlerData","addProduct","item","response"],"sources":["C:/Users/Marginal1/Desktop/react-stroyka/client/src/hooks/useAddProduct.ts"],"sourcesContent":["import { TransmittedData } from '../@types/models';\r\nimport { useAddCartItemMutation, useChangeCartItemMutation, useLazyGetCartQuery } from '../redux/injected/injectedCart';\r\nimport { useErrorHandler } from './useErrorHandler';\r\n\r\nexport const useAddProduct = () => {\r\n\r\n    const [getCartItems, getStatuses] = useLazyGetCartQuery();\r\n\r\n    const getErrorHandlerData = {\r\n        error: getStatuses.error,\r\n        isError: getStatuses.isError,\r\n        isClient: false,\r\n    }\r\n\r\n    useErrorHandler({ ...getErrorHandlerData })\r\n\r\n    const [addCartItem, addStatues] = useAddCartItemMutation();\r\n\r\n    const addErrorHandlerData = {\r\n        error: addStatues.error,\r\n        isError: addStatues.isError,\r\n        isClient: true,\r\n        errorMessage: 'Произошла ошибка при попытке добавления товара в корзину',\r\n    }\r\n\r\n    useErrorHandler({ ...addErrorHandlerData })\r\n\r\n    const [changeCartItem, changeStatuses] = useChangeCartItemMutation();\r\n\r\n    const changeErrorHandlerData = {\r\n        error: changeStatuses.error,\r\n        isError: changeStatuses.isError,\r\n        isClient: true,\r\n        errorMessage: 'Произошла ошибка при попытке увеличения колличества товара',\r\n    }\r\n\r\n    useErrorHandler({ ...changeErrorHandlerData })\r\n\r\n    const addProduct = async (item: TransmittedData) => {\r\n\r\n        const response = await getCartItems()\r\n\r\n        // if (response.data) {\r\n        //     if (response.data.some((obj) => obj.title === item.title)) {\r\n        //         const existingCount = response.data.find((obj) => obj.title === item.title)\r\n        //         item.count += existingCount!.count\r\n        //         // item.id = existingCount!.id\r\n        //         await changeCartItem(item)\r\n        //     } else {\r\n        //         await addCartItem(item)\r\n        //     }\r\n        // }\r\n    }\r\n    return addProduct\r\n}"],"mappings":";AACA,SAASA,sBAAsB,EAAEC,yBAAyB,EAAEC,mBAAmB,QAAQ,gCAAgC;AACvH,SAASC,eAAe,QAAQ,mBAAmB;AAEnD,OAAO,MAAMC,aAAa,GAAG,MAAM;EAAA;EAE/B,MAAM,CAACC,YAAY,EAAEC,WAAW,CAAC,GAAGJ,mBAAmB,EAAE;EAEzD,MAAMK,mBAAmB,GAAG;IACxBC,KAAK,EAAEF,WAAW,CAACE,KAAK;IACxBC,OAAO,EAAEH,WAAW,CAACG,OAAO;IAC5BC,QAAQ,EAAE;EACd,CAAC;EAEDP,eAAe,CAAC;IAAE,GAAGI;EAAoB,CAAC,CAAC;EAE3C,MAAM,CAACI,WAAW,EAAEC,UAAU,CAAC,GAAGZ,sBAAsB,EAAE;EAE1D,MAAMa,mBAAmB,GAAG;IACxBL,KAAK,EAAEI,UAAU,CAACJ,KAAK;IACvBC,OAAO,EAAEG,UAAU,CAACH,OAAO;IAC3BC,QAAQ,EAAE,IAAI;IACdI,YAAY,EAAE;EAClB,CAAC;EAEDX,eAAe,CAAC;IAAE,GAAGU;EAAoB,CAAC,CAAC;EAE3C,MAAM,CAACE,cAAc,EAAEC,cAAc,CAAC,GAAGf,yBAAyB,EAAE;EAEpE,MAAMgB,sBAAsB,GAAG;IAC3BT,KAAK,EAAEQ,cAAc,CAACR,KAAK;IAC3BC,OAAO,EAAEO,cAAc,CAACP,OAAO;IAC/BC,QAAQ,EAAE,IAAI;IACdI,YAAY,EAAE;EAClB,CAAC;EAEDX,eAAe,CAAC;IAAE,GAAGc;EAAuB,CAAC,CAAC;EAE9C,MAAMC,UAAU,GAAG,MAAOC,IAAqB,IAAK;IAEhD,MAAMC,QAAQ,GAAG,MAAMf,YAAY,EAAE;;IAErC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACJ,CAAC;;EACD,OAAOa,UAAU;AACrB,CAAC;AAAA,GAlDYd,aAAa;EAAA,QAEcF,mBAAmB,EAQvDC,eAAe,EAEmBH,sBAAsB,EASxDG,eAAe,EAE0BF,yBAAyB,EASlEE,eAAe;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}