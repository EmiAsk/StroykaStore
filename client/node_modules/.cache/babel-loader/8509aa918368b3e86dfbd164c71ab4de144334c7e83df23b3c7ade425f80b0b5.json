{"ast":null,"code":"import { stroykaApi } from '../stroyka.api';\nconst injectedOrders = stroykaApi.injectEndpoints({\n  endpoints: builder => ({\n    getOrders: builder.query({\n      query: () => ({\n        url: 'orders'\n      }),\n      providesTags: result => result ? [...result.map(_ref => {\n        let {\n          id\n        } = _ref;\n        return {\n          type: 'Orders',\n          id\n        };\n      }), 'Orders'] : ['Orders']\n    }),\n    addOrder: builder.mutation({\n      query: _ref2 => {\n        let {\n          ...data\n        } = _ref2;\n        return {\n          url: `orders`,\n          method: 'POST',\n          body: data\n        };\n      },\n      invalidatesTags: ['Orders']\n    }),\n    deleteOrder: builder.mutation({\n      query: id => ({\n        url: `orders/${id}`,\n        method: 'DELETE'\n      }),\n      invalidatesTags: ['Orders']\n    })\n  }),\n  overrideExisting: false\n});\nexport const {\n  useGetOrdersQuery,\n  useAddOrderMutation,\n  useDeleteOrderMutation\n} = injectedOrders;","map":{"version":3,"names":["stroykaApi","injectedOrders","injectEndpoints","endpoints","builder","getOrders","query","url","providesTags","result","map","id","type","addOrder","mutation","data","method","body","invalidatesTags","deleteOrder","overrideExisting","useGetOrdersQuery","useAddOrderMutation","useDeleteOrderMutation"],"sources":["C:/Users/Marginal1/Desktop/react-stroyka/client/src/redux/injected/injectedOrders.ts"],"sourcesContent":["import { OrderModel, SentOrderModel } from '../../@types/models';\r\nimport { stroykaApi } from '../stroyka.api';\r\n\r\nconst injectedOrders = stroykaApi.injectEndpoints({\r\n    endpoints: (builder) => ({\r\n        getOrders: builder.query<OrderModel[], void>({\r\n            query: () => ({\r\n                url: 'orders',\r\n            }),\r\n            providesTags: (result) =>\r\n                result\r\n                    ? [...result.map(({ id }) => ({ type: 'Orders' as const, id })), 'Orders']\r\n                    : ['Orders'],\r\n        }),\r\n        addOrder: builder.mutation<SentOrderModel, void>({\r\n            query: ({ ...data }) => ({\r\n                url: `orders`,\r\n                method: 'POST',\r\n                body: data,\r\n            }),\r\n            invalidatesTags: ['Orders'],\r\n        }),\r\n        deleteOrder: builder.mutation({\r\n            query: (id) => ({\r\n                url: `orders/${id}`,\r\n                method: 'DELETE',\r\n            }),\r\n            invalidatesTags: ['Orders'],\r\n        }),\r\n    }),\r\n\r\n    overrideExisting: false,\r\n})\r\n\r\nexport const { useGetOrdersQuery, useAddOrderMutation, useDeleteOrderMutation } = injectedOrders;"],"mappings":"AACA,SAASA,UAAU,QAAQ,gBAAgB;AAE3C,MAAMC,cAAc,GAAGD,UAAU,CAACE,eAAe,CAAC;EAC9CC,SAAS,EAAGC,OAAO,KAAM;IACrBC,SAAS,EAAED,OAAO,CAACE,KAAK,CAAqB;MACzCA,KAAK,EAAE,OAAO;QACVC,GAAG,EAAE;MACT,CAAC,CAAC;MACFC,YAAY,EAAGC,MAAM,IACjBA,MAAM,GACA,CAAC,GAAGA,MAAM,CAACC,GAAG,CAAC;QAAA,IAAC;UAAEC;QAAG,CAAC;QAAA,OAAM;UAAEC,IAAI,EAAE,QAAiB;UAAED;QAAG,CAAC;MAAA,CAAC,CAAC,EAAE,QAAQ,CAAC,GACxE,CAAC,QAAQ;IACvB,CAAC,CAAC;IACFE,QAAQ,EAAET,OAAO,CAACU,QAAQ,CAAuB;MAC7CR,KAAK,EAAE;QAAA,IAAC;UAAE,GAAGS;QAAK,CAAC;QAAA,OAAM;UACrBR,GAAG,EAAG,QAAO;UACbS,MAAM,EAAE,MAAM;UACdC,IAAI,EAAEF;QACV,CAAC;MAAA,CAAC;MACFG,eAAe,EAAE,CAAC,QAAQ;IAC9B,CAAC,CAAC;IACFC,WAAW,EAAEf,OAAO,CAACU,QAAQ,CAAC;MAC1BR,KAAK,EAAGK,EAAE,KAAM;QACZJ,GAAG,EAAG,UAASI,EAAG,EAAC;QACnBK,MAAM,EAAE;MACZ,CAAC,CAAC;MACFE,eAAe,EAAE,CAAC,QAAQ;IAC9B,CAAC;EACL,CAAC,CAAC;EAEFE,gBAAgB,EAAE;AACtB,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEC,iBAAiB;EAAEC,mBAAmB;EAAEC;AAAuB,CAAC,GAAGtB,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}