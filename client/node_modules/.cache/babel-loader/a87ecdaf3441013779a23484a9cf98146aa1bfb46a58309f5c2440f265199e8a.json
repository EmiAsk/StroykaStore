{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useEffect } from 'react';\nimport { useAppDispatch } from './../redux/store';\nimport { useSelector } from 'react-redux';\nimport { setCords, setLocality } from './../redux/slices/locateSlice';\nimport { setBodyConfirm, setToggleConfirm } from '../redux/slices/confirmSlice';\nexport const useLocate = () => {\n  _s();\n  const locality = useSelector(state => state.locate.locality);\n  const cords = useSelector(state => state.locate.cords);\n  const dispatch = useAppDispatch();\n  const getCords = useCallback(() => {\n    navigator.geolocation.getCurrentPosition(position => {\n      dispatch(setCords({\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude\n      }));\n    }, () => {\n      sessionStorage.setItem('location', 'Москва');\n      dispatch(setToggleConfirm(true));\n      dispatch(setBodyConfirm({\n        message: 'Не удалось определить местоположение. Включите геолокацию или укажите самостоятельно.',\n        type: 'error'\n      }));\n    });\n  }, [dispatch]);\n  const getLocate = useCallback(async () => {\n    if (cords.latitude !== null) {\n      try {\n        const response = await fetch(`https://geocode-maps.yandex.ru/1.x/?apikey=${process.env.REACT_APP_GEOCODER_KEY}&geocode=${cords.longitude},${cords.latitude}&format=json`);\n        const obj = await response.json();\n        const city = await obj.response.GeoObjectCollection.featureMember[0].GeoObject.metaDataProperty.GeocoderMetaData.Address.Components.find(obj => obj.kind === 'locality');\n        if (city === undefined) {\n          sessionStorage.setItem('location', 'Москва');\n          dispatch(setToggleConfirm(true));\n          dispatch(setBodyConfirm({\n            message: 'Не удалось определить местоположение. Хотите указать самостоятельно?',\n            type: 'undefined'\n          }));\n        } else {\n          sessionStorage.setItem('location', city.name);\n          dispatch(setLocality(city.name));\n          dispatch(setToggleConfirm(true));\n          dispatch(setBodyConfirm({\n            message: `Ваш город ${city.name} ?`,\n            type: 'defined'\n          }));\n        }\n      } catch (err) {\n        sessionStorage.setItem('location', 'Москва');\n        dispatch(setToggleConfirm(true));\n        dispatch(setBodyConfirm({\n          message: 'Не удалось определить местоположение. Хотите указать самостоятельно?',\n          type: 'undefined'\n        }));\n      }\n    }\n  }, [cords.latitude, cords.longitude, dispatch]);\n  useEffect(() => {\n    if (sessionStorage.getItem('location') === null) {\n      getCords();\n      getLocate();\n    } else {\n      dispatch(setLocality(sessionStorage.location));\n    }\n  }, [cords, dispatch, getCords, getLocate]);\n  return locality;\n};\n_s(useLocate, \"kyDTVdIgRV/yv32B5yoVy7k9CRo=\", false, function () {\n  return [useSelector, useSelector, useAppDispatch];\n});","map":{"version":3,"names":["useCallback","useEffect","useAppDispatch","useSelector","setCords","setLocality","setBodyConfirm","setToggleConfirm","useLocate","locality","state","locate","cords","dispatch","getCords","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","sessionStorage","setItem","message","type","getLocate","response","fetch","process","env","REACT_APP_GEOCODER_KEY","obj","json","city","GeoObjectCollection","featureMember","GeoObject","metaDataProperty","GeocoderMetaData","Address","Components","find","kind","undefined","name","err","getItem","location"],"sources":["C:/Users/Marginal1/Desktop/react-stroyka/client/src/hooks/useLocate.ts"],"sourcesContent":["import { useCallback, useEffect } from 'react';\r\nimport { RootState, useAppDispatch } from './../redux/store';\r\nimport { useSelector } from 'react-redux';\r\nimport { setCords, setLocality } from './../redux/slices/locateSlice';\r\nimport { setBodyConfirm, setToggleConfirm } from '../redux/slices/confirmSlice';\r\n\r\nexport const useLocate = () => {\r\n\r\n    const locality = useSelector((state: RootState) => state.locate.locality);\r\n    const cords = useSelector((state: RootState) => state.locate.cords);\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const getCords = useCallback(() => {\r\n        navigator.geolocation.getCurrentPosition(\r\n            position => {\r\n                dispatch(setCords(\r\n                    {\r\n                        latitude: position.coords.latitude,\r\n                        longitude: position.coords.longitude\r\n                    }\r\n                ))\r\n            },\r\n            () => {\r\n                sessionStorage.setItem('location', 'Москва')\r\n                dispatch(setToggleConfirm(true))\r\n                dispatch(setBodyConfirm({ message: 'Не удалось определить местоположение. Включите геолокацию или укажите самостоятельно.', type: 'error' }))\r\n            }\r\n        )\r\n    }, [dispatch])\r\n\r\n    const getLocate = useCallback(async () => {\r\n        if (cords.latitude !== null) {\r\n            try {\r\n                const response = await fetch(`https://geocode-maps.yandex.ru/1.x/?apikey=${process.env.REACT_APP_GEOCODER_KEY}&geocode=${cords.longitude},${cords.latitude}&format=json`)\r\n                const obj = await response.json()\r\n                const city = await obj.response.GeoObjectCollection.featureMember[0].GeoObject.metaDataProperty.GeocoderMetaData.Address.Components\r\n                    .find((obj: { kind: string, name: string }) => obj.kind === 'locality')\r\n                if (city === undefined) {\r\n                    sessionStorage.setItem('location', 'Москва')\r\n                    dispatch(setToggleConfirm(true))\r\n                    dispatch(setBodyConfirm({ message: 'Не удалось определить местоположение. Хотите указать самостоятельно?', type: 'undefined' }))\r\n                } else {\r\n                    sessionStorage.setItem('location', city.name)\r\n                    dispatch(setLocality(city.name))\r\n                    dispatch(setToggleConfirm(true))\r\n                    dispatch(setBodyConfirm({ message: `Ваш город ${city.name} ?`, type: 'defined' }))\r\n                }\r\n            } catch (err) {\r\n                sessionStorage.setItem('location', 'Москва')\r\n                dispatch(setToggleConfirm(true))\r\n                dispatch(setBodyConfirm({ message: 'Не удалось определить местоположение. Хотите указать самостоятельно?', type: 'undefined' }))\r\n            }\r\n\r\n        }\r\n    }, [cords.latitude, cords.longitude, dispatch])\r\n\r\n    useEffect(() => {\r\n        if (sessionStorage.getItem('location') === null) {\r\n            getCords()\r\n            getLocate()\r\n        } else {\r\n            dispatch(setLocality(sessionStorage.location))\r\n        }\r\n    }, [cords, dispatch, getCords, getLocate])\r\n\r\n    return locality\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}