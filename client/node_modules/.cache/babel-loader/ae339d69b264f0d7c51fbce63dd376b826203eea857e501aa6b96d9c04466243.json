{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Marginal1\\\\Desktop\\\\react-stroyka\\\\client\\\\src\\\\components\\\\Confirm\\\\Confirm.tsx\",\n  _s = $RefreshSig$();\nimport { memo } from 'react';\nimport clsx from 'clsx';\nimport { useSelector } from 'react-redux';\nimport { setToggleConfirm } from '../../redux/slices/confirmSlice';\nimport { setToggleChengeLocate } from '../../redux/slices/popupSlice';\nimport { useAppDispatch } from '../../redux/store';\nimport style from './Confirm.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Confirm = /*#__PURE__*/_s( /*#__PURE__*/memo(_c = _s(() => {\n  _s();\n  const confirmBody = useSelector(state => state.confirmSlice.body);\n  const dispatch = useAppDispatch();\n  const onClickAccept = () => {\n    if (confirmBody.type === 'defined') {\n      dispatch(setToggleConfirm(false));\n    } else if (confirmBody.type === 'undefined') {\n      dispatch(setToggleConfirm(false));\n      dispatch(setToggleChengeLocate(true));\n    } else if (confirmBody.type === 'error') {\n      dispatch(setToggleConfirm(false));\n      dispatch(setToggleChengeLocate(true));\n    }\n  };\n  const onClickCancel = () => {\n    if (confirmBody.type === 'defined') {\n      dispatch(setToggleConfirm(false));\n      dispatch(setToggleChengeLocate(true));\n    } else if (confirmBody.type === 'undefined') {\n      dispatch(setToggleConfirm(false));\n      sessionStorage.setItem('location', 'Москва');\n    } else if (confirmBody.type === 'error') {\n      dispatch(setToggleConfirm(false));\n      sessionStorage.setItem('location', 'Москва');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style['confirm'],\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: style['confirm-message'],\n      children: confirmBody.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: style['confirm__btns'],\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: clsx(style['confirm-accept'], style['confirm-btn']),\n        onClick: onClickAccept,\n        children: \"\\u041E\\u041A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: clsx(style['confirm-cancel'], style['confirm-btn']),\n        onClick: onClickCancel,\n        children: \"\\u041E\\u0442\\u043C\\u0435\\u043D\\u0430\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}, \"f0nK9Y1MXopqC5KTJa1maLn1RzA=\", false, function () {\n  return [useSelector, useAppDispatch];\n})), \"f0nK9Y1MXopqC5KTJa1maLn1RzA=\", false, function () {\n  return [useSelector, useAppDispatch];\n});\n_c2 = Confirm;\nexport default Confirm;\nvar _c, _c2;\n$RefreshReg$(_c, \"Confirm$memo\");\n$RefreshReg$(_c2, \"Confirm\");","map":{"version":3,"names":["memo","clsx","useSelector","setToggleConfirm","setToggleChengeLocate","useAppDispatch","style","Confirm","confirmBody","state","confirmSlice","body","dispatch","onClickAccept","type","onClickCancel","sessionStorage","setItem","message"],"sources":["C:/Users/Marginal1/Desktop/react-stroyka/client/src/components/Confirm/Confirm.tsx"],"sourcesContent":["import { FC, memo } from 'react';\r\nimport clsx from 'clsx';\r\nimport { useSelector } from 'react-redux';\r\nimport { setToggleConfirm } from '../../redux/slices/confirmSlice';\r\nimport { setToggleChengeLocate } from '../../redux/slices/popupSlice';\r\nimport { RootState, useAppDispatch } from '../../redux/store';\r\nimport style from './Confirm.module.scss';\r\n\r\nconst Confirm: FC = memo(() => {\r\n\r\n    const confirmBody = useSelector((state: RootState) => state.confirmSlice.body);\r\n    const dispatch = useAppDispatch();\r\n\r\n    const onClickAccept = () => {\r\n        if (confirmBody.type === 'defined') {\r\n            dispatch(setToggleConfirm(false))\r\n        } else if (confirmBody.type === 'undefined') {\r\n            dispatch(setToggleConfirm(false))\r\n            dispatch(setToggleChengeLocate(true))\r\n        } else if (confirmBody.type === 'error') {\r\n            dispatch(setToggleConfirm(false))\r\n            dispatch(setToggleChengeLocate(true))\r\n        }\r\n    }\r\n\r\n    const onClickCancel = () => {\r\n        if (confirmBody.type === 'defined') {\r\n            dispatch(setToggleConfirm(false))\r\n            dispatch(setToggleChengeLocate(true))\r\n        } else if (confirmBody.type === 'undefined') {\r\n            dispatch(setToggleConfirm(false))\r\n            sessionStorage.setItem('location', 'Москва')\r\n        } else if (confirmBody.type === 'error') {\r\n            dispatch(setToggleConfirm(false))\r\n            sessionStorage.setItem('location', 'Москва')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={style['confirm']}>\r\n            <p className={style['confirm-message']}>\r\n                {confirmBody.message}\r\n            </p>\r\n            <div className={style['confirm__btns']}>\r\n                <button\r\n                    className={clsx(style['confirm-accept'], style['confirm-btn'])}\r\n                    onClick={onClickAccept}>ОК</button>\r\n                <button\r\n                    className={clsx(style['confirm-cancel'], style['confirm-btn'])}\r\n                    onClick={onClickCancel}>Отмена</button>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default Confirm;"],"mappings":";;AAAA,SAAaA,IAAI,QAAQ,OAAO;AAChC,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,gBAAgB,QAAQ,iCAAiC;AAClE,SAASC,qBAAqB,QAAQ,+BAA+B;AACrE,SAAoBC,cAAc,QAAQ,mBAAmB;AAC7D,OAAOC,KAAK,MAAM,uBAAuB;AAAC;AAE1C,MAAMC,OAAW,iCAAGP,IAAI,SAAC,MAAM;EAAA;EAE3B,MAAMQ,WAAW,GAAGN,WAAW,CAAEO,KAAgB,IAAKA,KAAK,CAACC,YAAY,CAACC,IAAI,CAAC;EAC9E,MAAMC,QAAQ,GAAGP,cAAc,EAAE;EAEjC,MAAMQ,aAAa,GAAG,MAAM;IACxB,IAAIL,WAAW,CAACM,IAAI,KAAK,SAAS,EAAE;MAChCF,QAAQ,CAACT,gBAAgB,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC,MAAM,IAAIK,WAAW,CAACM,IAAI,KAAK,WAAW,EAAE;MACzCF,QAAQ,CAACT,gBAAgB,CAAC,KAAK,CAAC,CAAC;MACjCS,QAAQ,CAACR,qBAAqB,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC,MAAM,IAAII,WAAW,CAACM,IAAI,KAAK,OAAO,EAAE;MACrCF,QAAQ,CAACT,gBAAgB,CAAC,KAAK,CAAC,CAAC;MACjCS,QAAQ,CAACR,qBAAqB,CAAC,IAAI,CAAC,CAAC;IACzC;EACJ,CAAC;EAED,MAAMW,aAAa,GAAG,MAAM;IACxB,IAAIP,WAAW,CAACM,IAAI,KAAK,SAAS,EAAE;MAChCF,QAAQ,CAACT,gBAAgB,CAAC,KAAK,CAAC,CAAC;MACjCS,QAAQ,CAACR,qBAAqB,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC,MAAM,IAAII,WAAW,CAACM,IAAI,KAAK,WAAW,EAAE;MACzCF,QAAQ,CAACT,gBAAgB,CAAC,KAAK,CAAC,CAAC;MACjCa,cAAc,CAACC,OAAO,CAAC,UAAU,EAAE,QAAQ,CAAC;IAChD,CAAC,MAAM,IAAIT,WAAW,CAACM,IAAI,KAAK,OAAO,EAAE;MACrCF,QAAQ,CAACT,gBAAgB,CAAC,KAAK,CAAC,CAAC;MACjCa,cAAc,CAACC,OAAO,CAAC,UAAU,EAAE,QAAQ,CAAC;IAChD;EACJ,CAAC;EAED,oBACI;IAAK,SAAS,EAAEX,KAAK,CAAC,SAAS,CAAE;IAAA,wBAC7B;MAAG,SAAS,EAAEA,KAAK,CAAC,iBAAiB,CAAE;MAAA,UAClCE,WAAW,CAACU;IAAO;MAAA;MAAA;MAAA;IAAA,QACpB,eACJ;MAAK,SAAS,EAAEZ,KAAK,CAAC,eAAe,CAAE;MAAA,wBACnC;QACI,SAAS,EAAEL,IAAI,CAACK,KAAK,CAAC,gBAAgB,CAAC,EAAEA,KAAK,CAAC,aAAa,CAAC,CAAE;QAC/D,OAAO,EAAEO,aAAc;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAY,eACvC;QACI,SAAS,EAAEZ,IAAI,CAACK,KAAK,CAAC,gBAAgB,CAAC,EAAEA,KAAK,CAAC,aAAa,CAAC,CAAE;QAC/D,OAAO,EAAES,aAAc;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAgB;IAAA;MAAA;MAAA;MAAA;IAAA,QACzC;EAAA;IAAA;IAAA;IAAA;EAAA,QACJ;AAEd,CAAC;EAAA,QA3CuBb,WAAW,EACdG,cAAc;AAAA,GA0CjC;EAAA,QA3CsBH,WAAW,EACdG,cAAc;AAAA,EA0CjC;AAAA,MA7CIE,OAAW;AA+CjB,eAAeA,OAAO;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}