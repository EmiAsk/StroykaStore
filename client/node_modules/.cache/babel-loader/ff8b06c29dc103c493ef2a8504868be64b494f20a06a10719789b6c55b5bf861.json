{"ast":null,"code":"import { stroykaApi } from '../stroyka.api';\nconst injectedSearched = stroykaApi.injectEndpoints({\n  endpoints: builder => ({\n    getSearched: builder.query({\n      query: _ref => {\n        let {\n          count,\n          value\n        } = _ref;\n        return {\n          url: `products/?search=${value}`,\n          params: {\n            sortby: 'rating',\n            order: 'desc',\n            co: count\n          }\n        };\n      },\n      providesTags: result => result ? [...result.map(_ref2 => {\n        let {\n          id\n        } = _ref2;\n        return {\n          type: 'Searched',\n          id\n        };\n      }), 'Searched'] : ['Searched']\n    })\n  }),\n  overrideExisting: false\n});\nexport const {\n  useGetSearchedQuery\n} = injectedSearched;","map":{"version":3,"names":["stroykaApi","injectedSearched","injectEndpoints","endpoints","builder","getSearched","query","count","value","url","params","sortby","order","co","providesTags","result","map","id","type","overrideExisting","useGetSearchedQuery"],"sources":["C:/Users/Marginal1/Desktop/react-stroyka/client/src/redux/injected/injectedSearched.ts"],"sourcesContent":["import { stroykaApi } from '../stroyka.api';\r\nimport { ProductModel } from '../../@types/models';\r\n\r\ntype TSearchedParams = {\r\n    value: string;\r\n    count: number;\r\n}\r\n\r\nconst injectedSearched = stroykaApi.injectEndpoints({\r\n    endpoints: (builder) => ({\r\n        getSearched: builder.query<ProductModel[], TSearchedParams>({\r\n            query: ({ count, value }) => ({\r\n                url: `products/?search=${value}`,\r\n                params: {\r\n                    sortby: 'rating',\r\n                    order: 'desc',\r\n                    co: count,\r\n                }\r\n            }),\r\n            providesTags: (result) =>\r\n                result\r\n                    ? [...result.map(({ id }) => ({ type: 'Searched' as const, id })), 'Searched']\r\n                    : ['Searched'],\r\n        }),\r\n    }),\r\n    overrideExisting: false,\r\n})\r\n\r\nexport const { useGetSearchedQuery } = injectedSearched;"],"mappings":"AAAA,SAASA,UAAU,QAAQ,gBAAgB;AAQ3C,MAAMC,gBAAgB,GAAGD,UAAU,CAACE,eAAe,CAAC;EAChDC,SAAS,EAAGC,OAAO,KAAM;IACrBC,WAAW,EAAED,OAAO,CAACE,KAAK,CAAkC;MACxDA,KAAK,EAAE;QAAA,IAAC;UAAEC,KAAK;UAAEC;QAAM,CAAC;QAAA,OAAM;UAC1BC,GAAG,EAAG,oBAAmBD,KAAM,EAAC;UAChCE,MAAM,EAAE;YACJC,MAAM,EAAE,QAAQ;YAChBC,KAAK,EAAE,MAAM;YACbC,EAAE,EAAEN;UACR;QACJ,CAAC;MAAA,CAAC;MACFO,YAAY,EAAGC,MAAM,IACjBA,MAAM,GACA,CAAC,GAAGA,MAAM,CAACC,GAAG,CAAC;QAAA,IAAC;UAAEC;QAAG,CAAC;QAAA,OAAM;UAAEC,IAAI,EAAE,UAAmB;UAAED;QAAG,CAAC;MAAA,CAAC,CAAC,EAAE,UAAU,CAAC,GAC5E,CAAC,UAAU;IACzB,CAAC;EACL,CAAC,CAAC;EACFE,gBAAgB,EAAE;AACtB,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEC;AAAoB,CAAC,GAAGnB,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}